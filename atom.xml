<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘学鹏的博客</title>
  
  <subtitle>要想吃饱饭，总得留点汗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lxpzmm.com/"/>
  <updated>2020-06-11T02:06:21.885Z</updated>
  <id>http://lxpzmm.com/</id>
  
  <author>
    <name>tracy_liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>事件分发</title>
    <link href="http://lxpzmm.com/2020/06/11/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/"/>
    <id>http://lxpzmm.com/2020/06/11/事件分发/</id>
    <published>2020-06-11T02:06:21.000Z</published>
    <updated>2020-06-11T02:06:21.885Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HashMap理解</title>
    <link href="http://lxpzmm.com/2019/06/11/HashMap%E7%90%86%E8%A7%A3/"/>
    <id>http://lxpzmm.com/2019/06/11/HashMap理解/</id>
    <published>2019-06-11T02:59:32.000Z</published>
    <updated>2020-07-14T02:27:50.866Z</updated>
    
    <content type="html"><![CDATA[<p>#原因</p><p>hashmap在jdk1.7和1.8上是有区别的，在1.7上是数组+链表的形式，在1.8上是数组+链表+红黑树的形式。</p><p>在讲解hashmap之前我们先讲解一下hash。hash算法就是散列算法。就是把任意长度的输入变成有限长度的输出。是不可逆的算法，像md5，SHA1就是。通常散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，这就是hash碰撞。一个好的hash算法是减小hash碰撞率的。</p><p>红黑树，就是一种自平衡的二叉查找树。有如下性质：</p><p>性质1. 节点是红色或黑色。</p><p>性质2. 根节点是黑色。</p><p>性质3 每个叶节点（NIL节点，空节点）是黑色的。</p><p>性质4 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)</p><p>性质5. 从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。</p><p>接下来我们来看hashmap，在1.7上使用了entry数组来存储数据，用hash来得出index，用于存放在数据的位置，如果index相同，会存到同一个位置，这个位置用链表来保存，这就是hashmap解决碰见的链地址法，其他还有开放定址法（发生冲突，继续寻找下一块未被占用的存储地址），再散列函数法，如果得出的index都是一样的话，时间复杂度会变大o（n），红黑树我们大致了解了，他的好处就是他的自平衡性，让他这棵树的最大高度为2log(n+1)，n是树的节点数。那么红黑树的复杂度就只有 O(log n)。</p><p>接下来我们来看一下1.8的源码，在putval方法里，先进行hash算出index，然后判断index的位置是否有值，没有就直接插入进去，如果有，就进行链表的尾插法，如果链表长度达到8就会自动扩容把链表转成红黑树的数据结构来把时间复杂度从O（n）变成O（logN）提高了效率，如果有旧值，就返回旧值，然后拿新值替换旧值存储。</p><p>final void treeifyBin(Node&lt;K,V&gt;[] tab, int hash) {</p><pre><code>    int n, index; Node&lt;K,V&gt; e;    if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)        resize();  //开始树形化    else if ((e = tab[index = (n - 1) &amp; hash]) != null) {        TreeNode&lt;K,V&gt; hd = null, tl = null;      //对桶Node中的链表元素进行循环，从链表的头节点开始将链表的头元素改为树的头节点        do {            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, null);            if (tl == null)                hd = p;            else {              //树的头节点不为空时                p.prev = tl;                tl.next = p;            }            tl = p;        } while ((e = e.next) != null);        //将桶中的元素与树的头节点进行连接        if ((tab[index] = hd) != null)            hd.treeify(tab);    }}</code></pre><p>hashmap数组的容量默认16，是2的n次方，因为当长度是2的n次方时候，比如1111 11111 都能保证得到和原来hash低位相同，也就是扩容后只有一个位差异，多出来最左边位的1 这样只要对应左边的哪一个差异位为0，就能保证得到新的数组索引和老的数组索引一直 ，这样数据在数组的分布比较均匀，也就是说减少碰撞的几率，减少了链表的遍历，提升效率。</p><p>hashmap的扩容，默认的负载因子是0.75，默认的容量是16，如果超过这个值就会进行一次扩容，这个时候需要对所有值都重新计算一次，非常影响性能，所以如果你可以预知长度的话尽量提前设置长度提高性能。一次扩容就是把容量扩大一倍。</p><p>hashmap是线程不安全的，要想线程安全需要使用：</p><p>方法一:通过Collections.synchronizedMap()返回一个新的Map,这个新的map就是线程安全的. 这个要求大家习惯基于接口编程,因为返回的并不是HashMap,而是一个Map的实现</p><p>方法二:重新改写了HashMap,具体的可以查看java.util.concurrent.ConcurrentHashMap. 这个方法比方法一有了很大的改进</p><p>方法三:hashtable.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#原因&lt;/p&gt;
&lt;p&gt;hashmap在jdk1.7和1.8上是有区别的，在1.7上是数组+链表的形式，在1.8上是数组+链表+红黑树的形式。&lt;/p&gt;
&lt;p&gt;在讲解hashmap之前我们先讲解一下hash。hash算法就是散列算法。就是把任意长度的输入变成有限长度的输出。是不
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>理解handler原理</title>
    <link href="http://lxpzmm.com/2019/03/06/%E7%90%86%E8%A7%A3handler%E5%8E%9F%E7%90%86/"/>
    <id>http://lxpzmm.com/2019/03/06/理解handler原理/</id>
    <published>2019-03-06T09:41:30.000Z</published>
    <updated>2019-05-07T06:26:13.983Z</updated>
    
    <content type="html"><![CDATA[<p>#原因<br>  先说一说handler出现的原因，android为什么会提供这个功能呢？这是因为android规定访问ui需要在主线程进行，如果在子线程的话就会异常，ViewRootImpl中的checkThread方法来检测的。</p><p>#原理<br>Handler创建时会采用当前线程的Looper来构建内部的消息循环系统，如果当前线程没有Looper，那么就会报错。然后调用handler.sendMessage()方法，会继续调用延迟为0的sendMessageDelayed（），然后会加上系统时间加延迟时间调用sendMessageAtTime（）（这个时间会在后面延迟处理消息的时候用到），然后得到messagequeue，调用enqueueMessage（），然后调用messagequeue的enqueueMessage（）方法，然后按照时间线把当前message加入到messagequeue中。这个时候就要调用looper.loop来处理消息，最终一个死循环里调用msg.target(就是handler).dispatchMessage来处理消息。</p><p>###Looper<br>一个线程必须要有looper，looper.prepare创建looper，looper.loop循环处理消息，</p><p>###ThreadLocal<br>   说到handler就不得不说一下threadlocal。threadlocal是一个线程内部的数据存储类。他本身是由一个threadlocalmap来存储数据，这个对象是存储在thread类里的，所以他是按照线程做的区分，每个线程存储的数据各不相同。</p><p>###MessageQueue<br>在looper里面保存的消息队列</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#原因&lt;br&gt;  先说一说handler出现的原因，android为什么会提供这个功能呢？这是因为android规定访问ui需要在主线程进行，如果在子线程的话就会异常，ViewRootImpl中的checkThread方法来检测的。&lt;/p&gt;
&lt;p&gt;#原理&lt;br&gt;Handle
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>“理解上下文Context”</title>
    <link href="http://lxpzmm.com/2018/12/20/%E2%80%9C%E7%90%86%E8%A7%A3%E4%B8%8A%E4%B8%8B%E6%96%87Context%E2%80%9D/"/>
    <id>http://lxpzmm.com/2018/12/20/“理解上下文Context”/</id>
    <published>2018-12-20T06:53:19.000Z</published>
    <updated>2018-12-20T07:56:09.189Z</updated>
    
    <content type="html"><![CDATA[<p>#Context是什么<br>  context是上下文，是一个应用程序环境信息的接口，activity和service,application都间接继承自Context,因此一个应用程序进程中有多少个context是可以计算出来的，就是activity的数量+service的数量+1（application）</p><p>#Context的使用场景<br>  1.使用Context的调用方法，比如启动activity，访问资源，调用系统级服务等</p><p>  2.调用方法时传入Context，比如弹出toast，创建dialog等</p><p>  在使用时候我们什么时候会使用applicationcontext什么时候使用activitycontext：在对于ui相关的方法建议使用activitycontext（toast是个例外，使用applicationcontext也可以），其他操作是都可以，both ok，注意context的引用的时候注意生命周期，防止内存泄漏。</p><p>#Context关联类<br>   继承关系如下：<br>  <img src="https://upload-images.jianshu.io/upload_images/2911038-b085b93fb212fdd4.png" alt="Context继承关系图" title="这是Context继承关系图"></p><p>  我们可以看到activity和application都是间接继承自context，contextwrapper和contextimpl继承context，如类名命名一样，contextwrapper是一个包装类，里面有一个context实例mBase，实现是contextimpl，这里用到的就是一个装饰模式，contextwrapper中几乎所有的方法都是调用的contextimpl的相应方法实现的。其中contextthemewrapper也是contextwrapper的装饰类，添加了和主题相关的方法（比如gettheme方法），因此activity需要继承contextthemewrapper，而service就直接继承contextwrapper就好了。</p><p>  后续会给总结applicaiton，activity，service的启动过程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Context是什么&lt;br&gt;  context是上下文，是一个应用程序环境信息的接口，activity和service,application都间接继承自Context,因此一个应用程序进程中有多少个context是可以计算出来的，就是activity的数量+servic
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android的系统架构</title>
    <link href="http://lxpzmm.com/2018/11/20/Android%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    <id>http://lxpzmm.com/2018/11/20/Android的系统架构/</id>
    <published>2018-11-20T03:01:28.000Z</published>
    <updated>2018-11-20T03:20:54.307Z</updated>
    
    <content type="html"><![CDATA[<pre><code>android系统架构</code></pre><p>#应用层<br>  第一层是应用层，就是开发者开发的app，非系统级的应用都属于应用层</p><p>#FRAMEWORK<br>  第二层就是服务层，这一层是为应用层提供api的，通常都是java代码写的，常见的有activity manager，window manager等</p><p>#NATIVE<br>  第三层就是native层，包括了2部分，一部分是c/c++写的，能被android系统的不同组件所使用，并通过framework层提供服务，像opengl，sqlite，ssl等。另外一部分就是android运行时库，里面有java的核心库和虚拟机，在5.0之后dalvik被art取代，这个就是个虚拟机用来运行应用的，允许在有限的内存中同时运行多个虚拟机的实例，并且每一个dalvik应用作为一个单独的linux进程，独立的进程可以防止虚拟机崩溃的时候所有程序都被关闭，art与dalvik区别是，davik在每次运行的时候都会将字节码通过即时编译器转换为机器码，运行效率不高，而art会在安装应用时进行一次预编译，编译成机器码保存在本地，这样每次运行的时候就不需要执行编译了</p><p>#硬件抽象层<br> 硬件抽象层是位于操作系统内核与硬件电路之间的接口层，其目的在于将硬件抽象化，为了保护硬件厂商的知识产权，它隐藏了特定平台的硬件接口细节，为操作系统提供虚拟硬件平台，使其具有硬件无关性，可在多钟平台上进行移植。</p><p>#linux内核</p><p>android的核心系统服务基于linux内核，在此基础上添加了部分android专用的驱动。系统的安全性，内存管理，进程管理，网络协议栈和驱动模型等都依赖于该内核。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;android系统架构
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;#应用层&lt;br&gt;  第一层是应用层，就是开发者开发的app，非系统级的应用都属于应用层&lt;/p&gt;
&lt;p&gt;#FRAMEWORK&lt;br&gt;  第二层就是服务层，这一层是为应用层提供api的，通常都是java代码
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://lxpzmm.com/2018/11/16/hello-world/"/>
    <id>http://lxpzmm.com/2018/11/16/hello-world/</id>
    <published>2018-11-16T10:51:22.504Z</published>
    <updated>2018-11-16T10:51:22.505Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
